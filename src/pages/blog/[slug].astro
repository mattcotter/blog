---
// src/pages/posts/[slug].astro
import { getCollection } from 'astro:content'; // Removed getEntry as it's not directly used here
import type { CollectionEntry } from 'astro:content'; // <-- Import CollectionEntry for type safety
import BlogPostLayout from '../../layouts/BlogPostLayout.astro'; // Assuming you have a layout for blog posts

// Define the type for the props that this component will receive
interface Props {
  entry: CollectionEntry<'blog'>; // <-- This tells TypeScript what 'entry' will be
}

// 1. Generate paths for all blog posts
export async function getStaticPaths() {
  const blogEntries = await getCollection('blog', ({ data }) => !data.isDraft); // Fetch all blog posts, excluding drafts

  return blogEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// 2. Get the specific blog post data for the current page
// Now, TypeScript knows the type of 'entry' because of the 'Props' interface
const { entry } = Astro.props as Props; // <-- Cast Astro.props to your defined Props interface
const { Content } = await entry.render(); // Render the Markdown content

// Access frontmatter data via `entry.data`
const { title, pubDate, author, image, tags } = entry.data;
---

<BlogPostLayout title={title} pubDate={pubDate} author={author} image={image} tags={tags}>
  <Content />
</BlogPostLayout>